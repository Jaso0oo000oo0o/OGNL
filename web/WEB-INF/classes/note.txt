一. 文件上传
    1. 表单的提交方式必须是 post , 且form表单中必须加 enctype="multipart/form-data" 属性;
    2. 文件标签为<input type="file" name="XXX">;
    3. 动作类中定义file类型成员变量, 变量名与表单提交变量名一致, 同时,还需要提供get/set方法;
    4. 动作类中定义获得上传的文件的文件名称的属性XXXFileName, 其中XXX指的是表单中name属性,
       同时提供对象的get/set方法;
    5. 动作类中定义获得上传文件的MIME类型属性XXXContentType, 其中XXX指的是表单中name属性
        同时提供get/set方法; (可选)
    6. 在动作方法中将表单提交的file保存到本地目录:
        a. 通过ServletActionContext.getServletContext().getRealPath("file")获得项目的files文件夹对应
           真正路径, 该路径对应的是一个目录. 在out/artifacts/项目_war_exploded/files目录下;
        b. 利用目标路径+XXXFileName构建目标文件, 例如: File file = new File("目标路径",XXXFileName);
        c. 利用FileUtils.copyFile(srcFile,destFile)保存文件;
    7. 需要注意的几个配置:
        a. 上传文件大小限制: maximumSize (重写fileUpload拦截器中大小限制属性)或
            struts.multipart.maxSize (struts标签中constant常量设置)
        b. 上传文件的扩展名: allowedExtensions (重写fileUpload拦截器中的扩展名属性, 多个用 , 隔开);
        c. 上传文件的MIME类型: allowedType (重写fileUpload拦截器中的MiME类型属性, 多个用 , 隔开)

二. 文件下载
    1. 在动作类里面定义要提供下载的inputStream流对象, 该属性需要提供get/set方法;
    2. 在动作方法中初始化inputStream对象;
        a. 通过ServletActionContext.getServletContext().getRealPath("files")获得
            要下载的文件对应的目录
        b. 创建File对象, 即要提供下载的文件对象, 例如:File file = new File("文件目录","文件名称");
        c. 构建输入流对象, 例如: inputStream = new FileInputStream(file);
        d. 如果文件名中包含中文, 需要调用filenameEncoding方法对文件名做一下处理;
    3. 在struts.xml中配置action对象:
        a. result中的type需要是 stream 对象; 例如: <result name="stream">;
        b. 在<result>标签中定义<param>子标签, 用于重写下载的参数配置:
            - inputName : 下载的动作类中的输入流的属性名;
                          <param name="inputName">XXX</param>,
                          其中XXX与动作类的属性名一致;
            - contentDisposition : 配置浏览器以何种方式下载文件;
                                   <param name="contentDisposition">attachment;filename=${fileName}</param>,
                                   其中fileName可以写死,也可以用EL表达式动态取传递过来的参数;
            - contentType : 配置MIME类型;
                            <param name="contentType">application/octet-stream</param>;
